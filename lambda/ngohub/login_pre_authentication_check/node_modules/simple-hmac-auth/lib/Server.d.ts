/// <reference types="node" />
import http from 'http';
interface SimpleHMACAuthOptions {
    verbose: boolean;
    secretForKeyTimeout: number;
    permittedTimestampSkew: number;
    bodySizeLimit: number;
    bodySizeLimitBytes: number;
    secretForKey: SecretForKeyFunction;
}
declare type SecretKeyReturnFunction = (key: string) => string | undefined;
declare type SecretKeyPromiseFunction = (key: string) => Promise<string>;
declare type SecretKeyCallbackFunction = (key: string, callback: ((error: Error) => void) | ((error: undefined, secret: string) => void)) => void;
declare type SecretForKeyFunction = SecretKeyReturnFunction | SecretKeyPromiseFunction | SecretKeyCallbackFunction;
declare class SimpleHMACAuth {
    options: SimpleHMACAuthOptions;
    secretForKey?: SecretForKeyFunction;
    /**
     * Instantiate a new authentication object
     * @param {object}   [settings]
     * @param {function} [settings.secretForKey]                 Delegate function called to retrieve the secret for an API key
     * @param {boolean}  [settings.verbose=false]                If true, log debug information to the console
     * @param {number}   [settings.secretForKeyTimeout=10000]    How long until timing out on the secretForKey function
     * @param {number}   [settings.permittedTimestampSkew=60000] How far away from the current time to allow requests from
     * @param {number}   [settings.bodySizeLimit=10]             Default size limit for request body parsing, in megabytes
     */
    constructor(options?: Partial<SimpleHMACAuthOptions>);
    /**
     * Authenticate a request
     * @param   {object}  request - An HTTP request
     * @param   {object}  data - Body data for the request
     * @returns {Promise} - Promise that resolves if the request authenticates, or rejects if it is not
     */
    authenticate(request: http.IncomingMessage, data: string | true): Promise<{
        apiKey: string;
        secret: string;
        signature: string;
    }>;
    /**
     * Extract the API key from a request
     * @private
     * @param   {object} request - An HTTP request
     * @returns {string} API Key, if included
     */
    _apiKeyForRequest(request: http.IncomingMessage): string | undefined;
    /**
     * Retrieve the secret for an API key we got.
     * The server might have implemented this using callbacks, promises, or just return a string - so try all 3 approaches.
     * @private
     * @param   {string}  apiKey API key we received from the client
     * @returns {Promise} Promise that we got a secret for that API key from userland
     */
    private _secretForKey;
    /**
     * Extract the raw body data from a request
     * @private
     * @param   {object} request - An HTTP request
     * @returns {Promise} A promise that will resolve with the raw body of the request, or a blank string
     */
    private _rawBodyForRequest;
}
export default SimpleHMACAuth;
