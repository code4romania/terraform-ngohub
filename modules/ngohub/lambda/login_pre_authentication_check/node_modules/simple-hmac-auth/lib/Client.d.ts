/// <reference types="node" />
/// <reference types="node" />
import http from 'http';
import https from 'https';
interface ClientSettings {
    verbose?: boolean;
    timeout?: number;
    maxSockets?: number;
    host?: string;
    port?: number;
    ssl?: boolean;
    algorithm?: string;
    useDateHeader?: boolean;
    headers?: {
        [key: string]: string;
    };
    options?: http.RequestOptions | https.RequestOptions;
}
declare type ClientSettingsWithAuthentication = ClientSettings & {
    apiKey: string;
    secret: string;
};
declare type ClientCallback = ((error?: Error, response?: string | unknown) => void);
declare class Client {
    _settings: ClientSettingsWithAuthentication;
    agent: http.Agent | https.Agent;
    /**
     * Server Interface
     * @param {string}  apiKey                   API key
     * @param {string}  [secret]                 Secret key. Optional, but all requests are sent unsigned if omitted
     * @param {object}  [settings]               All additional options
     * @param {boolean} [settings.verbose=false] If true, log debug information to the console
     * @param {number}  [settings.timeout=7500]  How long until giving up on a request, in milliseconds
     * @param {number}  [settings.maxSockets=25] The maximum number of sockets to keep open to the platform at any given time
     */
    constructor(apiKey: string, secret?: string, settings?: Partial<ClientSettings>);
    /**
     * Log debug messages to the console, if 'verbose' is enabled.
     */
    log(...out: unknown[]): void;
    /**
     * Make a signed request to the server
     * @param   {string}   method   The HTTP method for this request
     * @param   {string}   path     The path for this request
     * @param   {object}   [query]  An object containing all the keys and values for the query string
     * @param   {object}   [data]   The message data
     * @param   {function} callback Callback executed when the request has succeeded or failed
     */
    call(method: string, path: string, data?: unknown, query?: {
        [key: string]: string;
    }, callback?: ClientCallback): Promise<string | unknown>;
    /**
     * Make an API call to the server
     * @param {object}   call                The method, path, query and body of the call
     * @param {string}   call.method         The HTTP method of the request
     * @param {string}   call.path           The path of the request
     * @param {object}   [call.query]        The query parameters of the request
     * @param {object}   [call.data]         The body of the request
     * @param {function} callback            Executes on completion
     */
    request(call: {
        method?: string;
        path?: string;
        query?: {
            [key: string]: unknown;
        };
        headers?: {
            [key: string]: string;
        };
        data?: unknown;
    }, callback?: ClientCallback): Promise<string | unknown>;
}
export default Client;
